"use strict"


function _m_m44_identity(m) {
    if(!m) {
        return [1, 0, 0, 0,
                0, 1, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1];
    }

    m[0] = m[5] = m[10] = m[15] = 1;
    m[1] = m[2] = m[3] = 0;
    m[4] = m[6] = m[7] = 0;
    m[8] = m[9] = m[11] = 0;
    m[12] = m[13] = m[14] = 0;
}


function _m_m44_invert(m, i) {
    m[0] = i[5]*i[10]*i[15] - i[5]*i[11]*i[14] - i[9]*i[6]*i[15] + i[9]*i[7]*i[14] + i[13]*i[6]*i[11] - i[13]*i[7]*i[10];
    m[1] = -i[1]*i[10]*i[15] + i[1]*i[11]*i[14] + i[9]*i[2]*i[15] - i[9]*i[3]*i[14] - i[13]*i[2]*i[11] + i[13]*i[3]*i[10];
    m[2] = i[1]*i[6]*i[15] - i[1]*i[7]*i[14] - i[5]*i[2]*i[15] + i[5]*i[3]*i[14] + i[13]*i[2]*i[7] - i[13]*i[3]*i[6];
    m[3] = -i[1]*i[6]*i[11] + i[1]*i[7]*i[10] + i[5]*i[2]*i[11] - i[5]*i[3]*i[10] - i[9]*i[2]*i[7] + i[9]*i[3]*i[6];
    m[4] = -i[4]*i[10]*i[15] + i[4]*i[11]*i[14] + i[8]*i[6]*i[15] - i[8]*i[7]*i[14] - i[12]*i[6]*i[11] + i[12]*i[7]*i[10];
    m[5] = i[0]*i[10]*i[15] - i[0]*i[11]*i[14] - i[8]*i[2]*i[15] + i[8]*i[3]*i[14] + i[12]*i[2]*i[11] - i[12]*i[3]*i[10];
    m[6] = -i[0]*i[6]*i[15] + i[0]*i[7]*i[14] + i[4]*i[2]*i[15] - i[4]*i[3]*i[14] -  i[12]*i[2]*i[7] + i[12]*i[3]*i[6];
    m[7] = i[0]*i[6]*i[11] - i[0]*i[7]*i[10] - i[4]*i[2]*i[11] + i[4]*i[3]*i[10] + i[8]*i[2]*i[7] - i[8]*i[3]*i[6];
    m[8] = i[4]*i[9]*i[15] - i[4]*i[11]*i[13] - i[8]*i[5]*i[15] + i[8]*i[7]*i[13] + i[12]*i[5]*i[11] - i[12] *i[7]*i[9];
    m[9] = -i[0]*i[9]*i[15] + i[0]*i[11]*i[13] + i[8]*i[1]*i[15] - i[8]*i[3]*i[13] - i[12]*i[1]*i[11] + i[12]*i[3]*i[9];
    m[10] = i[0]*i[5]*i[15] - i[0]*i[7]*i[13] - i[4]*i[1]*i[15] + i[4]*i[3]*i[13] + i[12]*i[1]*i[7] - i[12]*i[3]*i[5];
    m[11] = -i[0]*i[5]*i[11] + i[0]*i[7]*i[9] + i[4]*i[1]*i[11] - i[4]*i[3]*i[9] - i[8]*i[1]*i[7] + i[8]*i[3]*i[5];
    m[12] = -i[4]*i[9]*i[14] + i[4]*i[10]*i[13] + i[8]*i[5]*i[14] - i[8]*i[6]*i[13] - i[12]*i[5]*i[10] + i[12]*i[6]*i[9];
    m[13] = i[0]*i[9]*i[14] - i[0]*i[10]*i[13] - i[8]*i[1]*i[14] + i[8]*i[2]*i[13] + i[12]*i[1]*i[10] - i[12]*i[2]*i[9];
    m[14] = -i[0]*i[5]*i[14] + i[0]*i[6]*i[13] + i[4]*i[1]*i[14] - i[4]*i[2]*i[13] - i[12]*i[1]*i[6] + i[12]*i[2]*i[5];
    m[15] = i[0]*i[5]*i[10] - i[0]*i[6]*i[9] - i[4]*i[1]*i[10] + i[4]*i[2]*i[9] + i[8]*i[1]*i[6] -  i[8]*i[2]*i[5];

    let dt = i[0] * m[0] + i[1] * m[4] + i[2] * m[8] + i[3] * m[12];
    if(dt!= 0) dt = 1.0 / dt;

    for (i = 0; i < 16; i++)
        m[i] *= dt;
}


function _m_m44_transpose(m, i) {
    m[0] = i[0]; m[1] = i[4]; m[2] = i[8]; m[3] = i[12];
    m[4] = i[1]; m[5] = i[5]; m[6] = i[9]; m[7] = i[13];
    m[8] = i[2]; m[9] = i[6]; m[10] = i[10]; m[11] = i[14];
    m[12] = i[3]; m[13] = i[7]; m[14] = i[11]; m[15] = i[15];
}


function _m_m44_mul(m, a, b) {

    m[0] = a[0]*b[0] + a[1]*b[4] + a[2]*b[8] + a[3]*b[12];
    m[1] = a[0]*b[1] + a[1]*b[5] + a[2]*b[9] + a[3]*b[13];
    m[2] = a[0]*b[2] + a[1]*b[6] + a[2]*b[10] + a[3]*b[14];
    m[3] = a[0]*b[3] + a[1]*b[7] + a[2]*b[11] + a[3]*b[15];

    m[4] = a[4]*b[0] + a[5]*b[4] + a[6]*b[8] + a[7]*b[12];
    m[5] = a[4]*b[1] + a[5]*b[5] + a[6]*b[9] + a[7]*b[13];
    m[6] = a[4]*b[2] + a[5]*b[6] + a[6]*b[10] + a[7]*b[14];
    m[7] = a[4]*b[3] + a[5]*b[7] + a[6]*b[11] + a[7]*b[15];

    m[8] = a[8]*b[0] + a[9]*b[4] + a[10]*b[8] + a[11]*b[12];
    m[9] = a[8]*b[1] + a[9]*b[5] + a[10]*b[9] + a[11]*b[13];
    m[10] = a[8]*b[2] + a[9]*b[6] + a[10]*b[10] + a[11]*b[14];
    m[11] = a[8]*b[3] + a[9]*b[7] + a[10]*b[11] + a[11]*b[15];

    m[12] = a[12]*b[0] + a[13]*b[4] + a[14]*b[8] + a[15]*b[12];
    m[13] = a[12]*b[1] + a[13]*b[5] + a[14]*b[9] + a[15]*b[13];
    m[14] = a[12]*b[2] + a[13]*b[6] + a[14]*b[10] + a[15]*b[14];
    m[15] = a[12]*b[3] + a[13]*b[7] + a[14]*b[11] + a[15]*b[15];

}


function _m_m44_rotate(m, x, y, z) {
    //TODO: rotation around X and Z

    let c = Math.cos(y);
    let s = Math.sin(y);

    m[0] = c; m[2] = -s; m[5] = 1;
    m[8] = s; m[10] = c; m[15] = 1;
}


function _m_m44_scale(m, x, y, z) {
    m[0] = x; m[5] = y; m[10] = z;
}


function _m_m44_translate(m, x, y, z) {
    m[12] = x; m[13] = y; m[14] = z;
}


function _m_m44_projection(m, fv, r, zn, zf) {

    let f = 1.0 / Math.tan(fv / 2);
    let nf = 1 / (zn - zf);

    m[0] = f / r;
    m[1] = 0; m[2] = 0; m[3] = 0; m[4] = 0;
    m[5] = f;
    m[6] = 0; m[7] = 0; m[8] = 0; m[9] = 0;
    m[10] = (zf + zn ) * nf;
    m[11] = -1;
    m[12] = 0; m[13] = 0;
    m[14] = (2 * zf * zn) * nf;
    m[15] = 0;
}


function _m_m44_look_at(m, e, c, u) {

    let z = [
        e[0] - c[0],
        e[1] - c[1],
        e[2] - c[2]
    ];
    _m_v3_normalize(z);

    let x = [
        u[1] * z[2] - u[2] * z[1],
        u[2] * z[0] - u[0] * z[2],
        u[0] * z[1] - u[1] * z[0]
    ];
    _m_v3_normalize(x);

    let y = [
        z[1] * x[2] - z[2] * x[1],
        z[2] * x[0] - z[0] * x[2],
        z[0] * x[1] - z[1] * x[0]
    ];
    _m_v3_normalize(y);

    m[0] = x[0]; m[1] = y[0]; m[2] = z[0]; m[3] = 0;
    m[4] = x[1]; m[5] = y[1]; m[6] = z[1]; m[7] = 0;
    m[8] = x[2]; m[9] = y[2]; m[10] = z[2]; m[11] = 0;
    m[12] = -(x[0] * e[0] + x[1] * e[1] + x[2] * e[2]);
    m[13] = -(y[0] * e[0] + y[1] * e[1] + y[2] * e[2]);
    m[14] = -(z[0] * e[0] + z[1] * e[1] + z[2] * e[2]);
    m[15] = 1;
}


function _m_v3_normalize(v) {
    let l = Math.sqrt(v[0]*v[0] + v[1]*v[1] + v[2]*v[2]);
    (!l) ? l=0 : l=1/l;
    v[0] *= l; v[1] *= l; v[2] *= l;
}
